@page

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>ChatMate</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-dark-5@1.1.3/dist/css/bootstrap-dark.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body, html {
            height: 100%;
            margin: 0;
            padding: 10px;
            display: flex;
            flex-direction: column;
        }
        #app {
            display: flex;
            flex-direction: column;
            height: 100%;
        }
        .container {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        .chat-container {
            overflow-y: auto;
            flex: 1;
        }
        .chat-msg {
            margin: 0.5rem 0;
            border-radius: 0.5rem;
            padding: 0.75rem;
        }
        .user-msg {
            background-color: #384750;
        }
        .bot-msg {
            background-color: #5a5151;
        }
    </style>
</head>
<body class="bg-dark text-white d-flex flex-column">
    <div id="app" class="flex-grow-1"></div>

    <script type="module">
        import { createSignal, onMount, onCleanup, For, Switch, Match } from "https://cdn.skypack.dev/solid-js";
        import { render } from "https://cdn.skypack.dev/solid-js/web";
        import html from "https://cdn.skypack.dev/solid-js/html";
        
        const Chat = ({ messages, animation }) => {
            return () => html`
                <div class="d-flex justify-content-between align-items-center mb-3 p-2">
                    <div>ChatMate</div>
                    <div>Animation: <code>${animation}</code></div>
                </div>
                <div class="chat-container p-2">
                    <${For} each=${messages} fallback=${html`<p class="text-center text-secondary">Welcome to ChatMate!</p>`}>
                        ${msg => html`
                            <${Switch}>
                                <${Match} when=${msg.user === 'user'}>
                                    <div class="chat-msg user-msg text-end">${msg.text}<//>
                                <//>
                                <${Match} when=${msg.user === 'bot'}>
                                    <div class="chat-msg bot-msg">${msg.text}<//>
                                <//>
                            <//>
                        `}
                    <//>
                </div>
            `;
        }
        
        const MessageInput = ({ onSend }) => {
            let inputRef;
        
            window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            if (!window.SpeechRecognition)
                alert('Speech Recognition is not supported in your browser');
            let recognition = new SpeechRecognition();
        
            recognition.interimResults = true;  // Allow interim results
            recognition.lang = 'en-US';
        
            function sendMsg() {
                if (inputRef.value) {
                    onSend(inputRef.value);
                    inputRef.value = '';
                }
            }
        
            function onKeyPress(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    sendMsg();
                }
            }
        
            function startSpeechRecognition() {
                recognition.start();
            }
            
            const onRecognitionResult = (e) => {
                const transcript = Array.from(e.results)
                    .map(result => result[0])
                    .map(result => result.transcript)
                    .join('');
        
                inputRef.value = transcript;
            }
            
            const onRecognitionEnd = () => {
                setTimeout(sendMsg, 1);
            }
              
            onMount(() => {
                recognition.addEventListener('result', onRecognitionResult);
                recognition.addEventListener('end', onRecognitionEnd);
            })
        
            onCleanup(() => {
                recognition.removeEventListener('result', onRecognitionResult);
                recognition.removeEventListener('end', onRecognitionEnd);
            });
        
            return () => html`
                <div class="input-group mt-3">
                    <div class="input-group-text">
                        <button class="btn btn-secondary" onClick=${startSpeechRecognition}>
                            <i class="bi bi-mic"></i>
                        </button>
                    </div>
                    <input type="text"
                        class="form-control"
                        placeholder="Type your message here"
                        onKeyPress=${onKeyPress}
                        ref=${el => {
                            inputRef = el;
                        }}/>
                    <button class="btn btn-primary" onClick=${sendMsg}>Send</button>
                </div>
            `;
        }
        
        const App = () => {
            const [messages, setMessages] = createSignal([]);
            const [animation, setAnimation] = createSignal('idle');
        
            let socket;
        
            onMount(() => {
                socket = new WebSocket('ws://127.0.0.1:5384/ws');
        
                socket.onmessage = function(event) {
                    console.log('ws', event.data)
                    const data = JSON.parse(event.data);
                    switch(data.$type){
                        case 'reply':
                            setMessages(oldMessages => [...oldMessages, { user: 'bot', text: data.text }]);
                            break;
                        case 'animation':
                            setAnimation(data.value);
                            break;
                        case 'speech':
                            const audio = new Audio(data.url);
                            audio.play();
                            break;
                        default:
                            console.error('unknown message type', data)
                    }
                };
            });
        
            function onSend(content) {
                const msg = JSON.stringify({ $type: "send", text: content });
                socket.send(msg);
                setMessages(oldMessages => [...oldMessages, { user: "user", text: content }]);
            }
            
            return () => html`
                <div class="container p-0">
                    <${Chat} messages=${messages()} animation=${animation()} />
                    <${MessageInput} onSend=${onSend} />
                </div>
            `;
        }

        render(() => html`<${App} />`, document.getElementById("app"));
    </script>
</body>
</html>
