@page
@{
    Layout = "_Layout";
    ViewBag.Title = "Chat";
}

@section styles {
    <style>
        #app {
            display: flex;
            flex-direction: column;
            height: 100%;
        }
        .parent-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }
        .notification-container {
            position: fixed;
            bottom: 60px; /* Adjust to suit your layout */
            right: 1rem;
            z-index: 1050; /* Higher than most elements */
        }
        .chat-container {
            overflow-y: auto;
            flex-grow: 1;
        }
        .chat-msg {
            margin: 0.5rem 0;
            border-radius: 0.5rem;
            padding: 0.75rem;
        }
        .user-msg {
            background-color: #384750;
        }
        .bot-msg {
            background-color: #5a5151;
        }
        .error-msg {
            background-color: #5c2f2f;
        }
    </style>
}

<div id="app" class="flex-grow-1"></div>

<script type="module">
    import { createSignal, onMount, onCleanup, For, Switch, Match } from "https://cdn.skypack.dev/solid-js";
    import { render } from "https://cdn.skypack.dev/solid-js/web";
    import html from "https://cdn.skypack.dev/solid-js/html";
    
    let currentAudio;
    
    const playAudio = (url, onStart, onComplete) => {
        if (currentAudio) {
            currentAudio.pause();
        }
        currentAudio = new Audio(url);
        if (onStart) currentAudio.addEventListener('playing', () => onStart(currentAudio.duration));
        if (onComplete) currentAudio.addEventListener('ended', onComplete);
        currentAudio.play();
    }
    
    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    let recognition = window.SpeechRecognition ? new SpeechRecognition() : null;
    
    const Header = ({ animation, charactersList, onCharacterSelect }) => {
        return () => html`
            <div class="d-flex justify-content-between align-items-center mb-3 p-2">
                <div class="d-flex align-items-center">
                    <b>Character:</b>
                    <select class="ms-2 form-select" onChange=${e => onCharacterSelect(e.target.value)}>
                        <option value="">Select character</option>
                        <${For} each=${charactersList}>
                            ${bot => html`
                                <option value=${bot.id}>${bot.name} - ${bot.description}</option>
                            `}
                        <//>
                    </select>
                </div>
                <div>Animation: <code>${animation}</code></div>
            </div>
        `;
    };
    
    const Chat = ({ messages }) => {
        return () => html`
            <div class="chat-container p-2">
                <${For} each=${messages} fallback=${html`<p class="text-center text-secondary">Select a bot and start chatting</p>`}>
                    ${msg => html`
                        <${Switch}>
                            <${Match} when=${msg.user === 'user'}>
                                <div class="chat-msg user-msg text-end">${msg.text}<//>
                            <//>
                            <${Match} when=${msg.user === 'bot'}>
                                <div class="chat-msg bot-msg">${msg.text}<//>
                            <//>
                            <${Match} when=${msg.user === 'error'}>
                                <div class="chat-msg error-msg">${msg.text}<//>
                            <//>
                        <//>
                    `}
                <//>
            </div>
        `;
    }
    
    const MessageInput = ({ onSend, enabled, useServerSpeechRecognition }) => {
        let inputRef;
    
        function sendMsg() {
            if (inputRef.value) {
                onSend(inputRef.value);
                inputRef.value = '';
            }
        }
    
        function onKeyPress(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                if (!enabled) return;
                sendMsg();
            }
        }
    
        function startSpeechRecognition() {
            if (recognition) {
                recognition.start();
            } else {
                alert('Speech Recognition is not supported in your browser!');
            }
        }
        
        const onRecognitionResult = (e) => {
            inputRef.value = Array.from(e.results)
                .map(result => result[0])
                .map(result => result.transcript)
                .join('');
        }
        
        const onRecognitionEnd = () => {
            setTimeout(sendMsg, 1);
        }
          
        onMount(() => {
            if (recognition) {
                recognition.interimResults = true;  // Allow interim results
                recognition.lang = 'en-US';
                
                recognition.addEventListener('result', onRecognitionResult);
                recognition.addEventListener('end', onRecognitionEnd);
            }
        })
    
        onCleanup(() => {
            if (recognition) {
                recognition.removeEventListener('result', onRecognitionResult);
                recognition.removeEventListener('end', onRecognitionEnd);
            }
        });
    
        return () => html`
            <div class="input-group mt-3">
                <Show when=${!useServerSpeechRecognition}>
                    <div class="input-group-text">
                        <button class="btn btn-secondary" onClick=${startSpeechRecognition}>
                            <i class="bi bi-mic"></i>
                        </button>
                    </div>
                </Show>
                <input type="text"
                    class="form-control"
                    placeholder="Type your message here"
                    onKeyPress=${onKeyPress}
                    ref=${el => {
                        inputRef = el;
                    }}/>
                <button class="btn btn-primary" onClick=${sendMsg} disabled=${!enabled}>Send</button>
            </div>
        `;
    }
    
    const Notifications = ({ notifications }) => {
        return () => html`
            <div class="notification-container">
                <${For} each=${notifications}>
                    ${notification => html`
                        <div class=${`alert alert-${notification.type}`} role="alert">
                            ${notification.message}
                        </div>
                    `}
                <//>
            </div>
        `;
    }
    
    const App = () => {
        const [ready, setReady] = createSignal(false);
        const [messages, setMessages] = createSignal([]);
        const [animation, setAnimation] = createSignal('idle');
        const [charactersList, setCharactersList] = createSignal([]);
        const [useServerSpeechRecognition, _] = createSignal(true);
        const [notifications, setNotifications] = createSignal([]);
        
        let thinkingSpeechUrls = [];
        const playThinkingSpeech = () => {
            if (thinkingSpeechUrls.length) {
                const audioUrl = thinkingSpeechUrls[Math.floor(Math.random() * thinkingSpeechUrls.length)];
                playAudio(audioUrl);
            }
        }
        
        const addMessage = (message) => {
            setMessages(oldMessages => [...oldMessages, message]);
        };
        
        const notify = (type, message) => {
            setNotifications([]);
            setNotifications([{ type, message }]);
            if (type === 'success') {
                setTimeout(() => setNotifications([]), 5000);
            }
        }
        
        const onEvent = (event) => {
            console.log('ws', event.data)
            const data = JSON.parse(event.data);
            switch(data.$type){
                case 'reply':
                    addMessage({ user: 'bot', text: data.text });
                    break;
                case 'speech':
                    playAudio(
                        data.url,
                         (duration) => socket.send(JSON.stringify({ $type: "speechPlaybackStart", duration: duration })),
                         () => socket.send(JSON.stringify({ $type: "speechPlaybackComplete" }))
                     );
                    break;
                case 'speechRecognitionStart':
                    if (currentAudio) currentAudio.pause();
                    break;
                case 'speechRecognitionEnd':
                    onSend(data.text);
                    break;
                case 'error':
                    addMessage({ user: 'error', text: data.message });
                    break;
                case 'animation':
                    setAnimation(data.value);
                    break;
                case 'ready':
                    thinkingSpeechUrls = data.thinkingSpeechUrls || [];
                    setReady(true);
                    break;
                case 'welcome':
                    setCharactersList(data.characters);
                    break;
                case 'characterLoaded':
                    onCharacterLoaded(data);
                    break;
                default:
                    console.error('unknown message type', data)
            }
        };
    
        const wsUrl = 'ws://127.0.0.1:5384/ws';
        let socket;
        
        const connect = () => {
            socket = new WebSocket(wsUrl);
    
            socket.onmessage = onEvent;
            
            socket.onopen = function(event) {
                setMessages([]);
                notify('success', 'Connected to the server.');
            };
            
            socket.onclose = function(event) {
                notify('error', 'Connection lost. Reconnecting...');
                 setTimeout(function() {
                    connect();
                }, 5000);
            };
        
            socket.onerror = function(error) {
                notify('error', 'A socket error occurred: ' + error.message);
            };
        };
    
        onMount(() => {
            connect();
        });
        
        function onCharacterSelect(characterId) {
            setMessages([]);
            const msg = JSON.stringify({
                $type: "loadCharacter",
                characterId
            });
            socket.send(msg);
        }
        
        function onCharacterLoaded(template) {
            setMessages([]);
            const msg = JSON.stringify({
                ...template, 
                $type: "startChat",
                useServerSpeechRecognition: useServerSpeechRecognition(),
                acceptedAudioContentTypes: ["audio/x-wav", "audio/mpeg"],
            });
            socket.send(msg);
        }
    
        function onSend(content) {
            const msg = JSON.stringify({
              $type: "send",
              text: content,
              context: "Chatting with speech and no webcam.",
              actions: ['idle', 'smile', 'frown', 'angry', 'sad', 'surprised', 'thinking']
            });
            socket.send(msg);
            setMessages(oldMessages => [...oldMessages, { user: "user", text: content }]);
            playThinkingSpeech();
        }
        
        return () => html`
            <div class="container parent-container p-2">
                <${Header} animation=${animation()} charactersList=${charactersList()} onCharacterSelect=${onCharacterSelect} />
                <${Chat} messages=${messages()} />
                <${Notifications} notifications=${notifications()} />
                <${MessageInput} onSend=${onSend} enabled=${ready()}, useServerSpeechRecognition=${useServerSpeechRecognition()} />
            </div>
        `;
    }

    render(() => html`<${App} />`, document.getElementById("app"));
</script>
