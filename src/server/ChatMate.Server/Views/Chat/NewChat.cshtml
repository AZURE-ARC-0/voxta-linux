@page
@{
    Layout = null;
    ViewBag.Title = "Chat";
}

<html>
<head>
    <meta name="theme-color" content="#222222">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body, html {
            background-color: rgb(34, 34, 34);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        canvas {
            position: absolute;
            z-index: 1;
            width: 60%;
            height: 60%;
        }
        #characterButtons {
            position: absolute;
            z-index: 2;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        #message {
            position: absolute;
            z-index: 3;
            border-radius: 10px;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 10px;
            color: white;
            font-size: 20px;
            font-family: sans-serif;
            margin-top: 20%;
            max-width: 70%;
            text-align: center;
        }
    </style>
</head>
<body>

<canvas id="audioVisualizer"></canvas>
<div id="characterButtons"></div>
<div id="message" style="display: none;"></div>

<script type="module">
    import {ChatMateClient} from "/scripts/chatmate-client.js"; 
    import {AudioVisualizer} from "/scripts/audio-visualizer.js";
    
    const audioVisualizer = new AudioVisualizer(document.getElementById('audioVisualizer'));
    const characterButtons = document.getElementById('characterButtons');
    const messageBox = document.getElementById('message');
    
    const playAudio = (url, onStart, onComplete) => {
        audioVisualizer.play(url,  onStart, onComplete);
    }
        
    let thinkingSpeechUrls = [];
    const playThinkingSpeech = () => {
        if (thinkingSpeechUrls.length) {
            const audioUrl = thinkingSpeechUrls[Math.floor(Math.random() * thinkingSpeechUrls.length)];
            audioVisualizer.play(audioUrl, () => {}, () => {});
        }
    }
    
    const chatMateClient = new ChatMateClient('ws://127.0.0.1:5384/ws');
    
    chatMateClient.addEventListener('onopen', (evt) => {
    });
    chatMateClient.addEventListener('onclose', (evt) => {
    });
    chatMateClient.addEventListener('onerror', (evt) => {
    });
        
    chatMateClient.addEventListener('welcome', (evt) => {
        while (characterButtons.firstChild) {
            characterButtons.removeChild(characterButtons.firstChild);
        }
        evt.detail.characters.forEach(character => {
            const button = document.createElement('button');
            button.className = 'btn btn-secondary';
            button.textContent = character.name + ': ' + character.description;
            button.onclick = () => {
                chatMateClient.loadCharacter(character.id);
                characterButtons.style.display = 'none';
            };
            characterButtons.appendChild(button);
        });
        setTimeout(() => {
            characterButtons.style.opacity = '1';
        }, 100);
    });
    chatMateClient.addEventListener('characterLoaded', (evt) => {
        chatMateClient.startChat(evt.detail.character);
    });
    chatMateClient.addEventListener('ready', (evt) => {
        thinkingSpeechUrls = evt.detail.thinkingSpeechUrls || [];
    });
    chatMateClient.addEventListener('reply', (evt) => {
        messageBox.style.display = 'block';
        messageBox.innerText = evt.detail.text;
    });
    chatMateClient.addEventListener('speech', (evt) => {
        playAudio(
            evt.detail.url,
             (duration) => chatMateClient.speechPlaybackStart(duration),
             () => chatMateClient.speechPlaybackComplete()
         );
    });
    chatMateClient.addEventListener('action', (evt) => {
        // TODO: Change color (evt.detail.value);
    });
    chatMateClient.addEventListener('speechRecognitionStart', (evt) => {
        audioVisualizer.stop();
        audioVisualizer.listen();
    });
    chatMateClient.addEventListener('speechRecognitionEnd', (evt) => {
        playThinkingSpeech();
        messageBox.innerText = evt.detail.text;
        audioVisualizer.think();
        chatMateClient.send(
            evt.detail.text,
            "Chatting with speech and no webcam.",
            ['happy', 'sad', 'angry', 'confused']
        );
    });
    chatMateClient.addEventListener('error', (evt) => {
    });
                
    chatMateClient.connect();
</script>

</body>
</html>
