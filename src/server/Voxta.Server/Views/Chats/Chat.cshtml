@using Humanizer
@model Voxta.Server.ViewModels.Chats.ChatViewModel
@{
    Layout = "_Layout";
    ViewBag.Title = "Chats";
}

@section Head {
    <style>
        .summarized > td {
            color: #4f5864;
        }
        
        @@keyframes pulse {
          0% { background-color: transparent; }
          50% { background-color: rgb(80, 106, 110, 0.5); }
          100% { background-color: transparent; }
        }
    
        .pulse > td {
          animation: pulse 1s linear 3;
        }
    </style>
}

<div class="container py-3">
    <h1 class="mb-4">Chat</h1>
    
    <div class="card mb-3">
        <div class="card-header">
            <h2>Help</h2>
        </div>
        <div class="card-body">
            <p>This is your chat history. You can double-click on a message to edit it, but the tokens count will not be updated. You can delete all the text of a message to delete it.</p>
            <p>If the chat is live, you'll need to reload to get the updated history.</p>
            <p>Editing the chat history will not update memory.</p>
        </div>
    </div>
    
    <div class="card mb-3">
        <div class="card-header">
            <h2>Chat with @Model.Character.Name, started @Model.Created</h2>
        </div>
        <div class="card-body p-0">
            <table class="table mb-0">
                <thead>
                <tr>
                    <th>Character</th>
                    <th>Message</th>
                    <th class="text-end">Tokens (@Model.Messages.Where(m => m.SummarizedBy == null).Sum(m => m.Tokens))</th>
                </tr>
                </thead>

                <tbody>
                    @foreach (var message in Model.Messages)
                    {
                        <tr id="message-@message.Id" class="@(message.SummarizedBy != null ? "summarized" : "")">
                            <td>
                                <b>@message.User</b>
                            </td>
                            <td>
                                <div class="text-muted">
                                    @message.Timestamp.Humanize()
                                @if (message.SummarizedBy != null)
                                {
                                    <i>
                                        <span class="badge badge-dark">Summarized</span>
                                        <a class="summarized-by-link" href="#message-@message.SummarizedBy">Click to the the summary.</a>
                                    </i>
                                }
                                </div>
                                <span class="editable" data-message-id="@message.Id">@message.Value</span>
                            </td>
                            <td class="text-end text-muted">
                                @message.Tokens
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll('.editable').forEach(function (editable) {
        editable.addEventListener('dblclick', function () {
            const originalText = editable.textContent;
            const messageId = editable.getAttribute('data-message-id');

            // Create Input
            const input = document.createElement('input');
            input.type = 'text';
            input.value = originalText.trim();
            input.className = 'form-control'; // Bootstrap class for input styling

            // Create Checkmark Button
            const checkmark = document.createElement('button');
            checkmark.className = 'btn btn-success'; // Bootstrap class for button styling
            checkmark.innerHTML = '<i class="bi bi-check"></i>'; // Bootstrap icon for checkmark
            checkmark.addEventListener('click', function () {
                const newText = input.value;
                fetch('/chat/@Model.Id/messages/' + messageId, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ text: newText })
                })
                .then(() => {
                    editable.innerHTML = '';
                    if (newText)
                        editable.textContent = newText;
                    else
                        editable.textContent = 'DELETED';
                }, e => {
                    editable.innerHTML = '';
                    editable.textContent = e.toString();
                });
            });

            // Create Cancel Button
            const cancel = document.createElement('button');
            cancel.className = 'btn btn-danger'; // Bootstrap class for button styling
            cancel.innerHTML = '<i class="bi bi-x"></i>'; // Bootstrap icon for cancel
            cancel.addEventListener('click', function () {
                editable.textContent = originalText;
            });

            // Create a container to hold input and buttons
            const container = document.createElement('div');
            container.className = 'd-flex'; // Bootstrap class for flexbox layout
            container.appendChild(input);
            container.appendChild(checkmark);
            container.appendChild(cancel);

            editable.innerHTML = '';
            editable.appendChild(container);
            
            input.focus();
            input.select();
        });
    });
    
    const links = document.querySelectorAll('.summarized-by-link');
    links.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
        
            const anchorID = this.getAttribute('href').substring(1);
            const anchor = document.getElementById(anchorID);
        
            anchor.classList.add('pulse');
        
            setTimeout(() => anchor.classList.remove('pulse'), 1000);
            window.location.hash = anchorID;
        });
    });
});

</script>