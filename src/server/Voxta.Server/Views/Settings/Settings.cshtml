@model Voxta.Server.ViewModels.Settings.SettingsViewModel
@{
    Layout = "_Layout";
    ViewBag.Title = "Settings";
}


@section head {
    <style>
        .tooltip2 {
          position: relative;
          display: inline-block;
          cursor: pointer;
          border-bottom: 1px dotted black; /*optional, to indicate a tooltip is available */
        }
        
        .tooltip2 .tooltip-text {
          visibility: hidden;
          width: 60vw;
          background-color: #555;
          color: #fff;
          text-align: left;
          padding: 5px;
          border-radius: 6px;
          
          /* Positioning */
          position: absolute;
          z-index: 1;
          bottom: 100%; 
          left: -50%;
        
          /* Fade-in effect */
          opacity: 0;
          transition: opacity 0.3s;
        }
        
        .tooltip2:hover .tooltip-text {
          visibility: visible;
          opacity: 1;
        }
    </style>
}

<div class="container">
    <h1>Settings</h1>
    
    <div class="card mb-3">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h2>Help</h2>
            <button class="btn btn-dark" type="button" data-bs-toggle="collapse" data-bs-target="#collapseHelp" aria-expanded="false" aria-controls="collapseHelp">
                <i class="bi bi-question-circle"></i> General help
            </button>
        </div>
        <div class="card-body">
            <p>The first available service of each category with the required features for the character (e.g. multilingual, nsfw) will be used.</p>
            <div class="collapse" id="collapseHelp">
                <p>To talk with an AI, you need:</p>
                <ul>
                    <li><code>Text Gen</code> (the ability to "think" and generate a response)</li>
                    <li><code>Text To Speech</code>, also known as <code>TTS</code> (the ability to "speak" words)</li>
                    <li><code>Speech To Text</code>, also known as <code>STT</code> (the ability to "hear" what you say)</li>
                    <li><code>Action Inference</code> (the ability to "infer" actions the AI can do from the conversation)</li>
                </ul>
                <p>So, make sure to configure at least one of each.</p>
                <p>Unless you specify a service, the first available AI that matches the requirements will be selected. You can reorder them if you have different preferences.</p>
            </div>
        </div>
    </div>
    
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h2>
                Profile
            </h2>
            <button class="btn btn-dark btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#collapseHelp_profile" aria-expanded="false" aria-controls="collapseHelp_profile">
                <i class="bi bi-question-circle"></i>
            </button>
        </div>
        <div class="card-body">
            <div class="collapse" id="collapseHelp_profile">
                <p>Your profile defines how the AI will see you and call you.</p>
            </div>
            <table class="table table-striped">
                <thead>
                <tr>
                    <th scope="col" style="width: 80px;">Status</th>
                    <th scope="col">Message</th>
                    <th scope="col" style="width: 80px;"></th>
                </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @if (Model.Profile != null)
                            {
                                <i class="bi bi-check-circle-fill text-success"></i>
                            }
                            else
                            {
                                <i class="bi bi-exclamation-circle-fill text-danger"></i>
                            }
                        </td>
                        <td>
                            
                            @if (Model.Profile != null)
                            {
                                @Model.Profile.Name
                            }
                            else
                            {
                                <span>Profile not configured</span>
                            }
                        </td>
                        <td class="text-end">
                            <div class="d-inline-flex">
                                <a class="btn btn-sm btn-secondary" href="/settings/profile">Configure</a>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h2>
                Services
            </h2>
            <button class="btn btn-dark btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#collapseHelp_services" aria-expanded="false" aria-controls="collapseHelp_services">
                <i class="bi bi-question-circle"></i>
            </button>
        </div>
        <div class="card-body">
            <div class="collapse" id="collapseHelp_services">
                <p>Services are where your AI runs, including text generation, text to speech, and speech to text.</p>
            </div>
            <table class="table table-striped">
                <thead>
                <tr>
                    <th scope="col" style="width: 80px;">Type</th>
                    <th scope="col">Name</th>
                    <th scope="col" style="width: 80px;">
                        @if(Model.Services.Any(x => x.Service.Enabled && x.Help.TextGen)) { <i class="bi bi-check-circle-fill text-success"></i> } else { <i class="bi bi-dash-circle-fill text-secondary"></i> }
                        TXT
                    </th>
                    <th scope="col" style="width: 80px;">
                        @if(Model.Services.Any(x => x.Service.Enabled && x.Help.TTS)) { <i class="bi bi-check-circle-fill text-success"></i> } else { <i class="bi bi-dash-circle-fill text-secondary"></i> }
                        TTS
                    </th>
                    <th scope="col" style="width: 80px;">
                        @if(Model.Services.Any(x => x.Service.Enabled && x.Help.STT)) { <i class="bi bi-check-circle-fill text-success"></i> } else { <i class="bi bi-dash-circle-fill text-secondary"></i> }
                        STT
                    </th>
                    <th scope="col" style="width: 80px;"></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var s in Model.Services)
                {
                    <tr>
                        <td>
                            @s.Help.ServiceName
                        </td>
                        <td>
                            @s.Help.Label
                            @if (!string.IsNullOrEmpty(s.Service.Label))
                            {
                                <span>(@s.Service.Label)</span>
                            }
                        </td>
                        @if(s.Service.Enabled)
                        {
                            <td>@if(s.Help.TextGen) { <i class="bi bi-check-circle-fill text-success"></i> } else { <i class="bi bi-dash-circle-fill text-secondary"></i> }</td>
                            <td>@if(s.Help.TTS) { <i class="bi bi-check-circle-fill text-success"></i> } else { <i class="bi bi-dash-circle-fill text-secondary"></i> }</td>
                            <td>@if(s.Help.STT) { <i class="bi bi-check-circle-fill text-success"></i> } else { <i class="bi bi-dash-circle-fill text-secondary"></i> }</td>
                        }
                        else
                        {
                            <td colspan="3"><span class="text-muted">Disabled</span></td>
                        }
                        <td class="text-end">
                            <div class="d-inline-flex">
                                <a class="btn btn-sm btn-secondary" href="/settings/@s.Help.ServiceName.ToLowerInvariant()/@s.Service.Id">Configure</a>
                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
        <div class="card-footer text-center">
            <a class="btn btn-secondary" href="/settings/add"><i class="bi bi-plus"></i> Add services</a>
        </div>
    </div>
    
    @foreach (var serviceType in Model.ServiceTypes)
    {
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h2>
                    @serviceType.Title
                </h2>
                <button class="btn btn-dark btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#collapseHelp_@serviceType.Name" aria-expanded="false" aria-controls="collapseHelp_@serviceType.Name">
                    <i class="bi bi-question-circle"></i>
                </button>
            </div>
            <div class="card-body">
                <div class="collapse" id="collapseHelp_@serviceType.Name">
                    @Html.Raw(serviceType.Help)
                </div>
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th scope="col" style="width: 80px;">Status</th>
                        <th scope="col" style="width: 250px;">Service</th>
                        <th scope="col">Message</th>
                        <th scope="col" style="width: 80px;"></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var s in serviceType.Services)
                    {
                        <tr>
                            <td>
                                @if (!s.IsReady)
                                {
                                    <i class="bi bi-dash-circle-fill text-secondary"></i>
                                }
                                else if (s.IsHealthy)
                                {
                                    <i class="bi bi-check-circle-fill text-success"></i>
                                }
                                else
                                {
                                    <i class="bi bi-exclamation-circle-fill text-danger"></i>
                                }
                            </td>
                            <td>
                                @s.Label
                            </td>
                            <td>
                                @if (s.IsTested || s is { IsReady: true,IsHealthy: false })
                                {
                                    <code class="tooltip2">
                                        @s.Status
                                        @if (!string.IsNullOrEmpty(s.Details))
                                        {
                                            <span class="tooltip-text"><pre>@s.Details.Trim()</pre></span>
                                        }
                                    </code>
                                }
                                else if (!s.IsReady)
                                {
                                    <span class="text-muted">Disabled</span>
                                }
                                else
                                {
                                    <span>Ready</span>
                                }
                            </td>
                            <td class="text-end">
                                <div class="d-inline-flex">
                                    @if (serviceType.Services[0] == s)
                                    {
                                        <input type="submit" value="Primary" class="btn btn-sm btn-dark me-2" disabled="disabled"/>
                                    }
                                    else
                                    {
                                        using (Html.BeginForm("Reorder", "Settings"))
                                        {
                                            <input type="hidden" name="direction" value="up"/>
                                            <input type="hidden" name="type" value="@serviceType.Name"/>
                                            <input type="hidden" name="name" value="@s.ServiceName"/>
                                            <input type="submit" value="Move Up" class="btn btn-sm btn-dark me-2"/>
                                        }
                                    }
                                    <a class="btn btn-sm btn-secondary" href="/settings/@s.ServiceName.ToLower()">Configure</a>
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }
    <div class="card mb-3">
        <div class="card-header">
            <h2>Test</h2>
        </div>
        <div class="card-body">
            <div class="d-flex justify-content-center text-center">
                <form asp-action="TestAllSettings">
                    <input type="hidden" name="test" value="true"/>
                    <p class="text-muted pl-2">Click once and wait for the results, it may take some time.</p>
                    <p><button id="testBtn" type="submit" class="btn btn-primary"><i class="bi bi-journal-check"></i> Test Now</button></p>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
  document.getElementById('testBtn').addEventListener('click', function() {
      setTimeout(() => this.disabled = true, 1);
  });
</script>